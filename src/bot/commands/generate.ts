import { Context } from 'telegraf';
import { Message } from 'telegraf/types';
import { LangChainService } from '../../services/langchainService';
import { TemplateService } from '../../services/templateService';
import { InvoiceData, InvoiceItem, FileBuffer } from '../../types/index';
import { Buffer } from 'buffer';

// –®–∞–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
enum ProcessingStage {
  WAITING_SUPPLIER_INVOICE = 'WAITING_SUPPLIER_INVOICE',
  WAITING_CLIENT_INVOICE = 'WAITING_CLIENT_INVOICE',
  GENERATING_FILES = 'GENERATING_FILES'
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface UserState {
  stage: ProcessingStage;
  supplierInvoice?: FileBuffer;
  clientInvoice?: FileBuffer;
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map<number, UserState>();

export const generateCommand = async (ctx: Context) => {
  try {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø–µ—Ä–≤—ã–º —à–∞–≥–æ–º
    userStates.set(userId, {
      stage: ProcessingStage.WAITING_SUPPLIER_INVOICE
    });

    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–Ω–≤–æ–π—Å –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx –∏–ª–∏ .xls)');
  } catch (error) {
    console.error('Error in generate command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
export const handleDocument = async (ctx: Context & { message: any }) => {
  try {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    const userState = userStates.get(userId);
    if (!userState) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /generate');
      return;
    }

    const document = ctx.message.document;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if (!document.file_name?.endsWith('.xlsx') && !document.file_name?.endsWith('.xls')) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls)');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
    const file = await ctx.telegram.getFile(document.file_id);
    const response = await fetch(`https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`);
    const buffer = Buffer.from(await response.arrayBuffer());

    const fileBuffer: FileBuffer = {
      buffer,
      filename: document.file_name || 'document.xlsx',
      mimeType: document.mime_type || 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    };

    switch (userState.stage) {
      case ProcessingStage.WAITING_SUPPLIER_INVOICE:
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–≤–æ–π—Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        userState.supplierInvoice = fileBuffer;
        userState.stage = ProcessingStage.WAITING_CLIENT_INVOICE;
        userStates.set(userId, userState);
        await ctx.reply('–ò–Ω–≤–æ–π—Å –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω. –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–Ω–≤–æ–π—Å –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.');
        break;

      case ProcessingStage.WAITING_CLIENT_INVOICE:
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–≤–æ–π—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
        userState.clientInvoice = fileBuffer;
        userState.stage = ProcessingStage.GENERATING_FILES;
        userStates.set(userId, userState);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ message_id
        const statusMsg = await ctx.reply('–û–±–∞ –∏–Ω–≤–æ–π—Å–∞ –ø–æ–ª—É—á–µ–Ω—ã. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...');
        let statusMessageId = statusMsg.message_id;
        const chatId = ctx.chat?.id;
        const editStatus = async (text: string) => {
          if (chatId && statusMessageId) {
            try {
              await ctx.telegram.editMessageText(chatId, statusMessageId, undefined, text);
            } catch (e) {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', e);
            }
          }
        };
        try {
          await editStatus('üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω–≤–æ–π—Å–∞ –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞...');
          const supplierData = await LangChainService.parseInvoice(userState.supplierInvoice!);

          await editStatus('üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è...');
          const clientData = await LangChainService.parseSupplierInvoice(userState.clientInvoice!);

          await editStatus('‚úÖ –ò–Ω–≤–æ–π—Å—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã! –û—Ç–ø—Ä–∞–≤–ª—è—é JSON...');
          // –í—ã–≤–æ–¥–∏–º JSON –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          console.log('SupplierData:', supplierData);
          console.log('ClientData:', clientData);
          await ctx.reply(`Supplier JSON:\n<pre>${JSON.stringify(supplierData, null, 2)}</pre>`, { parse_mode: 'HTML' });
          await ctx.reply(`Client JSON:\n<pre>${JSON.stringify(clientData, null, 2)}</pre>`, { parse_mode: 'HTML' });

          await editStatus('üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ Items...');
          const buffer = await TemplateService.generateItemsXls(supplierData, clientData);
          const folder = (clientData.invoice_number || '').replace(/ /g, '_');
          await ctx.replyWithDocument({
            source: buffer,
            filename: `Items (–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è 1–°) [${folder}].xlsx`
          });

          await editStatus('üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ Inv...');
          const invBuffer = await TemplateService.generateInvXls(supplierData, clientData);
          await ctx.replyWithDocument({
            source: invBuffer,
            filename: `Inv (–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è 1–°) [${folder}].xlsx`
          });

          await editStatus('üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ Sales Invoice...');
          const salesBuffer = await TemplateService.generateSalesInvoiceXls(supplierData, clientData);
          await ctx.replyWithDocument({
            source: salesBuffer,
            filename: `Sales Invoice (–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è 1–°) [${folder}].xlsx`
          });

          await editStatus('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Ç–æ–≥–æ–≤—ã—Ö —Å—É–º–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞...');
          
          // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—É–º–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑ items
          const calculateTotals = (data: any) => {
            const calculated = (data.items || []).reduce((acc: any, item: any) => {
              acc.totalQuantity += Number(item.quantity || 0);
              acc.totalAmount += Number(item.unit_price || 0) * Number(item.quantity || 0);
              return acc;
            }, { totalQuantity: 0, totalAmount: 0 });
            
            calculated.totalAmount = Math.round(calculated.totalAmount * 100) / 100;
            return calculated;
          };

          // –ü—Ä–æ–≤–µ—Ä–∫–∞ supplierData
          const supplierCalculated = calculateTotals(supplierData);
          const supplierTotalAmount = Math.round((supplierData.total_amount || 0) * 100) / 100;
          const supplierTotalQuantity = supplierData.total_quantity || 0;
          
          const supplierAmountCheck = supplierCalculated.totalAmount === supplierTotalAmount;
          const supplierQuantityCheck = supplierCalculated.totalQuantity === supplierTotalQuantity;

          // –ü—Ä–æ–≤–µ—Ä–∫–∞ clientData
          const clientCalculated = calculateTotals(clientData);
          const clientTotalAmount = Math.round((clientData.total_amount || 0) * 100) / 100;
          const clientTotalQuantity = clientData.total_quantity || 0;
          
          const clientAmountCheck = clientCalculated.totalAmount === clientTotalAmount;
          const clientQuantityCheck = clientCalculated.totalQuantity === clientTotalQuantity;

          // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É supplierData –∏ clientData
          const quantityMatch = supplierCalculated.totalQuantity === clientCalculated.totalQuantity;
          const amountMatch = supplierCalculated.totalAmount === clientCalculated.totalAmount;

          // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
          const checkReport = [
            'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:',
            '',
            'üîπ Supplier Invoice:',
            `Total Amount: ${supplierCalculated.totalAmount} vs ${supplierTotalAmount} ‚Äî ${supplierAmountCheck ? '–û–ö ‚úÖ' : '–ù–ï –°–û–í–ü–ê–î–ê ‚ùå'}`,
            `Total Quantity: ${supplierCalculated.totalQuantity} vs ${supplierTotalQuantity} ‚Äî ${supplierQuantityCheck ? '–û–ö ‚úÖ' : '–ù–ï –°–û–í–ü–ê–î–ê ‚ùå'}`,
            '',
            'üîπ Client Invoice:',
            `Total Amount: ${clientCalculated.totalAmount} vs ${clientTotalAmount} ‚Äî ${clientAmountCheck ? '–û–ö ‚úÖ' : '–ù–ï –°–û–í–ü–ê–î–ê ‚ùå'}`,
            `Total Quantity: ${clientCalculated.totalQuantity} vs ${clientTotalQuantity} ‚Äî ${clientQuantityCheck ? '–û–ö ‚úÖ' : '–ù–ï –°–û–í–ü–ê–î–ê ‚ùå'}`,
            '',
            'üî∏ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É –∏–Ω–≤–æ–π—Å–∞–º–∏:',
            `Total Quantity: ${supplierCalculated.totalQuantity} vs ${clientCalculated.totalQuantity} ‚Äî ${quantityMatch ? '–°–û–í–ü–ê–î–ê–Æ–¢ ‚úÖ' : '–ù–ï –°–û–í–ü–ê–î–ê–Æ–¢ ‚ùå'}`
          ].join('\n');

          await ctx.reply(checkReport);

          await editStatus('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ —Ñ–∞–π–ª—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∏–∂–µ.');
          console.log({supplierData, clientData});
        } catch (error) {
          console.error('Error processing invoices:', error);
          await editStatus('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω–≤–æ–π—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω–≤–æ–π—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      default:
        await ctx.reply('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /generate');
        break;
    }
  } catch (error) {
    console.error('Error handling document:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}; 